// Autogenerated code. Do not modify.
package com.mycompany.app.jooq.tables.interfaces;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import java.util.Arrays;
import java.util.EnumSet;
import javax.annotation.Generated;

/**
 * Auto-generated superclass of {@link IEmployee.Builder},
 * derived from the API of {@link IEmployee}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class IEmployee_Builder {

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    EMPID("empid"),
    EMPUHNUMBER("empuhnumber"),
    EMPFIRSTNAME("empfirstname"),
    EMPLASTNAME("emplastname"),
    EMPROLE("emprole"),
    EMPDIVISION("empdivision"),
    EMPSTATUS("empstatus"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String empid;
  private String empuhnumber;
  private String empfirstname;
  private String emplastname;
  private String emprole;
  private String empdivision;
  private String empstatus;
  private final EnumSet<IEmployee_Builder.Property> _unsetProperties =
      EnumSet.allOf(IEmployee_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link IEmployee#getEmpid()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code empid} is null
   */
  public IEmployee.Builder setEmpid(String empid) {
    this.empid = Preconditions.checkNotNull(empid);
    _unsetProperties.remove(IEmployee_Builder.Property.EMPID);
    return (IEmployee.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link IEmployee#getEmpid()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getEmpid() {
    Preconditions.checkState(
        !_unsetProperties.contains(IEmployee_Builder.Property.EMPID), "empid not set");
    return empid;
  }

  /**
   * Sets the value to be returned by {@link IEmployee#getEmpuhnumber()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code empuhnumber} is null
   */
  public IEmployee.Builder setEmpuhnumber(String empuhnumber) {
    this.empuhnumber = Preconditions.checkNotNull(empuhnumber);
    _unsetProperties.remove(IEmployee_Builder.Property.EMPUHNUMBER);
    return (IEmployee.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link IEmployee#getEmpuhnumber()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getEmpuhnumber() {
    Preconditions.checkState(
        !_unsetProperties.contains(IEmployee_Builder.Property.EMPUHNUMBER), "empuhnumber not set");
    return empuhnumber;
  }

  /**
   * Sets the value to be returned by {@link IEmployee#getEmpfirstname()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code empfirstname} is null
   */
  public IEmployee.Builder setEmpfirstname(String empfirstname) {
    this.empfirstname = Preconditions.checkNotNull(empfirstname);
    _unsetProperties.remove(IEmployee_Builder.Property.EMPFIRSTNAME);
    return (IEmployee.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link IEmployee#getEmpfirstname()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getEmpfirstname() {
    Preconditions.checkState(
        !_unsetProperties.contains(IEmployee_Builder.Property.EMPFIRSTNAME),
        "empfirstname not set");
    return empfirstname;
  }

  /**
   * Sets the value to be returned by {@link IEmployee#getEmplastname()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code emplastname} is null
   */
  public IEmployee.Builder setEmplastname(String emplastname) {
    this.emplastname = Preconditions.checkNotNull(emplastname);
    _unsetProperties.remove(IEmployee_Builder.Property.EMPLASTNAME);
    return (IEmployee.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link IEmployee#getEmplastname()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getEmplastname() {
    Preconditions.checkState(
        !_unsetProperties.contains(IEmployee_Builder.Property.EMPLASTNAME), "emplastname not set");
    return emplastname;
  }

  /**
   * Sets the value to be returned by {@link IEmployee#getEmprole()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code emprole} is null
   */
  public IEmployee.Builder setEmprole(String emprole) {
    this.emprole = Preconditions.checkNotNull(emprole);
    _unsetProperties.remove(IEmployee_Builder.Property.EMPROLE);
    return (IEmployee.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link IEmployee#getEmprole()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getEmprole() {
    Preconditions.checkState(
        !_unsetProperties.contains(IEmployee_Builder.Property.EMPROLE), "emprole not set");
    return emprole;
  }

  /**
   * Sets the value to be returned by {@link IEmployee#getEmpdivision()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code empdivision} is null
   */
  public IEmployee.Builder setEmpdivision(String empdivision) {
    this.empdivision = Preconditions.checkNotNull(empdivision);
    _unsetProperties.remove(IEmployee_Builder.Property.EMPDIVISION);
    return (IEmployee.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link IEmployee#getEmpdivision()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getEmpdivision() {
    Preconditions.checkState(
        !_unsetProperties.contains(IEmployee_Builder.Property.EMPDIVISION), "empdivision not set");
    return empdivision;
  }

  /**
   * Sets the value to be returned by {@link IEmployee#getEmpstatus()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code empstatus} is null
   */
  public IEmployee.Builder setEmpstatus(String empstatus) {
    this.empstatus = Preconditions.checkNotNull(empstatus);
    _unsetProperties.remove(IEmployee_Builder.Property.EMPSTATUS);
    return (IEmployee.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link IEmployee#getEmpstatus()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getEmpstatus() {
    Preconditions.checkState(
        !_unsetProperties.contains(IEmployee_Builder.Property.EMPSTATUS), "empstatus not set");
    return empstatus;
  }

  /**
   * Sets all property values using the given {@code IEmployee} as a template.
   */
  public IEmployee.Builder mergeFrom(IEmployee value) {
    setEmpid(value.getEmpid());
    setEmpuhnumber(value.getEmpuhnumber());
    setEmpfirstname(value.getEmpfirstname());
    setEmplastname(value.getEmplastname());
    setEmprole(value.getEmprole());
    setEmpdivision(value.getEmpdivision());
    setEmpstatus(value.getEmpstatus());
    return (IEmployee.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public IEmployee.Builder mergeFrom(IEmployee.Builder template) {
    // Upcast to access the private _unsetProperties field.
    // Otherwise, oddly, we get an access violation.
    EnumSet<IEmployee_Builder.Property> _templateUnset =
        ((IEmployee_Builder) template)._unsetProperties;
    if (!_templateUnset.contains(IEmployee_Builder.Property.EMPID)) {
      setEmpid(template.getEmpid());
    }
    if (!_templateUnset.contains(IEmployee_Builder.Property.EMPUHNUMBER)) {
      setEmpuhnumber(template.getEmpuhnumber());
    }
    if (!_templateUnset.contains(IEmployee_Builder.Property.EMPFIRSTNAME)) {
      setEmpfirstname(template.getEmpfirstname());
    }
    if (!_templateUnset.contains(IEmployee_Builder.Property.EMPLASTNAME)) {
      setEmplastname(template.getEmplastname());
    }
    if (!_templateUnset.contains(IEmployee_Builder.Property.EMPROLE)) {
      setEmprole(template.getEmprole());
    }
    if (!_templateUnset.contains(IEmployee_Builder.Property.EMPDIVISION)) {
      setEmpdivision(template.getEmpdivision());
    }
    if (!_templateUnset.contains(IEmployee_Builder.Property.EMPSTATUS)) {
      setEmpstatus(template.getEmpstatus());
    }
    return (IEmployee.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public IEmployee.Builder clear() {
    IEmployee_Builder _template = new IEmployee.Builder();
    empid = _template.empid;
    empuhnumber = _template.empuhnumber;
    empfirstname = _template.empfirstname;
    emplastname = _template.emplastname;
    emprole = _template.emprole;
    empdivision = _template.empdivision;
    empstatus = _template.empstatus;
    _unsetProperties.clear();
    _unsetProperties.addAll(_template._unsetProperties);
    return (IEmployee.Builder) this;
  }

  /**
   * Returns a newly-created {@link IEmployee} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public IEmployee build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new IEmployee_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link IEmployee}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public IEmployee buildPartial() {
    return new IEmployee_Builder.Partial(this);
  }

  private static final class Value implements IEmployee {
    private final String empid;
    private final String empuhnumber;
    private final String empfirstname;
    private final String emplastname;
    private final String emprole;
    private final String empdivision;
    private final String empstatus;

    private Value(IEmployee_Builder builder) {
      this.empid = builder.empid;
      this.empuhnumber = builder.empuhnumber;
      this.empfirstname = builder.empfirstname;
      this.emplastname = builder.emplastname;
      this.emprole = builder.emprole;
      this.empdivision = builder.empdivision;
      this.empstatus = builder.empstatus;
    }

    @Override
    public String getEmpid() {
      return empid;
    }

    @Override
    public String getEmpuhnumber() {
      return empuhnumber;
    }

    @Override
    public String getEmpfirstname() {
      return empfirstname;
    }

    @Override
    public String getEmplastname() {
      return emplastname;
    }

    @Override
    public String getEmprole() {
      return emprole;
    }

    @Override
    public String getEmpdivision() {
      return empdivision;
    }

    @Override
    public String getEmpstatus() {
      return empstatus;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IEmployee_Builder.Value)) {
        return false;
      }
      IEmployee_Builder.Value other = (IEmployee_Builder.Value) obj;
      if (!empid.equals(other.empid)) {
        return false;
      }
      if (!empuhnumber.equals(other.empuhnumber)) {
        return false;
      }
      if (!empfirstname.equals(other.empfirstname)) {
        return false;
      }
      if (!emplastname.equals(other.emplastname)) {
        return false;
      }
      if (!emprole.equals(other.emprole)) {
        return false;
      }
      if (!empdivision.equals(other.empdivision)) {
        return false;
      }
      if (!empstatus.equals(other.empstatus)) {
        return false;
      }
      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.hashCode(
          new Object[] {
            empid, empuhnumber, empfirstname, emplastname, emprole, empdivision, empstatus
          });
    }

    @Override
    public String toString() {
      return "IEmployee{"
          + "empid="
          + empid
          + ", "
          + "empuhnumber="
          + empuhnumber
          + ", "
          + "empfirstname="
          + empfirstname
          + ", "
          + "emplastname="
          + emplastname
          + ", "
          + "emprole="
          + emprole
          + ", "
          + "empdivision="
          + empdivision
          + ", "
          + "empstatus="
          + empstatus
          + "}";
    }
  }

  private static final class Partial implements IEmployee {
    private final String empid;
    private final String empuhnumber;
    private final String empfirstname;
    private final String emplastname;
    private final String emprole;
    private final String empdivision;
    private final String empstatus;
    private final EnumSet<IEmployee_Builder.Property> _unsetProperties;

    Partial(IEmployee_Builder builder) {
      this.empid = builder.empid;
      this.empuhnumber = builder.empuhnumber;
      this.empfirstname = builder.empfirstname;
      this.emplastname = builder.emplastname;
      this.emprole = builder.emprole;
      this.empdivision = builder.empdivision;
      this.empstatus = builder.empstatus;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String getEmpid() {
      if (_unsetProperties.contains(IEmployee_Builder.Property.EMPID)) {
        throw new UnsupportedOperationException("empid not set");
      }
      return empid;
    }

    @Override
    public String getEmpuhnumber() {
      if (_unsetProperties.contains(IEmployee_Builder.Property.EMPUHNUMBER)) {
        throw new UnsupportedOperationException("empuhnumber not set");
      }
      return empuhnumber;
    }

    @Override
    public String getEmpfirstname() {
      if (_unsetProperties.contains(IEmployee_Builder.Property.EMPFIRSTNAME)) {
        throw new UnsupportedOperationException("empfirstname not set");
      }
      return empfirstname;
    }

    @Override
    public String getEmplastname() {
      if (_unsetProperties.contains(IEmployee_Builder.Property.EMPLASTNAME)) {
        throw new UnsupportedOperationException("emplastname not set");
      }
      return emplastname;
    }

    @Override
    public String getEmprole() {
      if (_unsetProperties.contains(IEmployee_Builder.Property.EMPROLE)) {
        throw new UnsupportedOperationException("emprole not set");
      }
      return emprole;
    }

    @Override
    public String getEmpdivision() {
      if (_unsetProperties.contains(IEmployee_Builder.Property.EMPDIVISION)) {
        throw new UnsupportedOperationException("empdivision not set");
      }
      return empdivision;
    }

    @Override
    public String getEmpstatus() {
      if (_unsetProperties.contains(IEmployee_Builder.Property.EMPSTATUS)) {
        throw new UnsupportedOperationException("empstatus not set");
      }
      return empstatus;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IEmployee_Builder.Partial)) {
        return false;
      }
      IEmployee_Builder.Partial other = (IEmployee_Builder.Partial) obj;
      if (empid != other.empid && (empid == null || !empid.equals(other.empid))) {
        return false;
      }
      if (empuhnumber != other.empuhnumber
          && (empuhnumber == null || !empuhnumber.equals(other.empuhnumber))) {
        return false;
      }
      if (empfirstname != other.empfirstname
          && (empfirstname == null || !empfirstname.equals(other.empfirstname))) {
        return false;
      }
      if (emplastname != other.emplastname
          && (emplastname == null || !emplastname.equals(other.emplastname))) {
        return false;
      }
      if (emprole != other.emprole && (emprole == null || !emprole.equals(other.emprole))) {
        return false;
      }
      if (empdivision != other.empdivision
          && (empdivision == null || !empdivision.equals(other.empdivision))) {
        return false;
      }
      if (empstatus != other.empstatus
          && (empstatus == null || !empstatus.equals(other.empstatus))) {
        return false;
      }
      return _unsetProperties.equals(other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Arrays.hashCode(
          new Object[] {
            empid,
            empuhnumber,
            empfirstname,
            emplastname,
            emprole,
            empdivision,
            empstatus,
            _unsetProperties
          });
    }

    @Override
    public String toString() {
      return "partial IEmployee{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(IEmployee_Builder.Property.EMPID)
                  ? "empid=" + empid
                  : null),
              (!_unsetProperties.contains(IEmployee_Builder.Property.EMPUHNUMBER)
                  ? "empuhnumber=" + empuhnumber
                  : null),
              (!_unsetProperties.contains(IEmployee_Builder.Property.EMPFIRSTNAME)
                  ? "empfirstname=" + empfirstname
                  : null),
              (!_unsetProperties.contains(IEmployee_Builder.Property.EMPLASTNAME)
                  ? "emplastname=" + emplastname
                  : null),
              (!_unsetProperties.contains(IEmployee_Builder.Property.EMPROLE)
                  ? "emprole=" + emprole
                  : null),
              (!_unsetProperties.contains(IEmployee_Builder.Property.EMPDIVISION)
                  ? "empdivision=" + empdivision
                  : null),
              (!_unsetProperties.contains(IEmployee_Builder.Property.EMPSTATUS)
                  ? "empstatus=" + empstatus
                  : null))
          + "}";
    }
  }
}
