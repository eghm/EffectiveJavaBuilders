// Autogenerated code. Do not modify.
package com.mycompany.app.jooq.tables.interfaces;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import java.util.Arrays;
import java.util.EnumSet;
import javax.annotation.Generated;

/**
 * Auto-generated superclass of {@link IEmpmanager.Builder},
 * derived from the API of {@link IEmpmanager}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class IEmpmanager_Builder {

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    EMPID("empid"),
    DIVISION("division"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String empid;
  private String division;
  private final EnumSet<IEmpmanager_Builder.Property> _unsetProperties =
      EnumSet.allOf(IEmpmanager_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link IEmpmanager#getEmpid()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code empid} is null
   */
  public IEmpmanager.Builder setEmpid(String empid) {
    this.empid = Preconditions.checkNotNull(empid);
    _unsetProperties.remove(IEmpmanager_Builder.Property.EMPID);
    return (IEmpmanager.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link IEmpmanager#getEmpid()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getEmpid() {
    Preconditions.checkState(
        !_unsetProperties.contains(IEmpmanager_Builder.Property.EMPID), "empid not set");
    return empid;
  }

  /**
   * Sets the value to be returned by {@link IEmpmanager#getDivision()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code division} is null
   */
  public IEmpmanager.Builder setDivision(String division) {
    this.division = Preconditions.checkNotNull(division);
    _unsetProperties.remove(IEmpmanager_Builder.Property.DIVISION);
    return (IEmpmanager.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link IEmpmanager#getDivision()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getDivision() {
    Preconditions.checkState(
        !_unsetProperties.contains(IEmpmanager_Builder.Property.DIVISION), "division not set");
    return division;
  }

  /**
   * Sets all property values using the given {@code IEmpmanager} as a template.
   */
  public IEmpmanager.Builder mergeFrom(IEmpmanager value) {
    setEmpid(value.getEmpid());
    setDivision(value.getDivision());
    return (IEmpmanager.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public IEmpmanager.Builder mergeFrom(IEmpmanager.Builder template) {
    // Upcast to access the private _unsetProperties field.
    // Otherwise, oddly, we get an access violation.
    EnumSet<IEmpmanager_Builder.Property> _templateUnset =
        ((IEmpmanager_Builder) template)._unsetProperties;
    if (!_templateUnset.contains(IEmpmanager_Builder.Property.EMPID)) {
      setEmpid(template.getEmpid());
    }
    if (!_templateUnset.contains(IEmpmanager_Builder.Property.DIVISION)) {
      setDivision(template.getDivision());
    }
    return (IEmpmanager.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public IEmpmanager.Builder clear() {
    IEmpmanager_Builder _template = new IEmpmanager.Builder();
    empid = _template.empid;
    division = _template.division;
    _unsetProperties.clear();
    _unsetProperties.addAll(_template._unsetProperties);
    return (IEmpmanager.Builder) this;
  }

  /**
   * Returns a newly-created {@link IEmpmanager} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public IEmpmanager build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new IEmpmanager_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link IEmpmanager}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public IEmpmanager buildPartial() {
    return new IEmpmanager_Builder.Partial(this);
  }

  private static final class Value implements IEmpmanager {
    private final String empid;
    private final String division;

    private Value(IEmpmanager_Builder builder) {
      this.empid = builder.empid;
      this.division = builder.division;
    }

    @Override
    public String getEmpid() {
      return empid;
    }

    @Override
    public String getDivision() {
      return division;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IEmpmanager_Builder.Value)) {
        return false;
      }
      IEmpmanager_Builder.Value other = (IEmpmanager_Builder.Value) obj;
      if (!empid.equals(other.empid)) {
        return false;
      }
      if (!division.equals(other.division)) {
        return false;
      }
      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.hashCode(new Object[] {empid, division});
    }

    @Override
    public String toString() {
      return "IEmpmanager{" + "empid=" + empid + ", " + "division=" + division + "}";
    }
  }

  private static final class Partial implements IEmpmanager {
    private final String empid;
    private final String division;
    private final EnumSet<IEmpmanager_Builder.Property> _unsetProperties;

    Partial(IEmpmanager_Builder builder) {
      this.empid = builder.empid;
      this.division = builder.division;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String getEmpid() {
      if (_unsetProperties.contains(IEmpmanager_Builder.Property.EMPID)) {
        throw new UnsupportedOperationException("empid not set");
      }
      return empid;
    }

    @Override
    public String getDivision() {
      if (_unsetProperties.contains(IEmpmanager_Builder.Property.DIVISION)) {
        throw new UnsupportedOperationException("division not set");
      }
      return division;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IEmpmanager_Builder.Partial)) {
        return false;
      }
      IEmpmanager_Builder.Partial other = (IEmpmanager_Builder.Partial) obj;
      if (empid != other.empid && (empid == null || !empid.equals(other.empid))) {
        return false;
      }
      if (division != other.division && (division == null || !division.equals(other.division))) {
        return false;
      }
      return _unsetProperties.equals(other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Arrays.hashCode(new Object[] {empid, division, _unsetProperties});
    }

    @Override
    public String toString() {
      return "partial IEmpmanager{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(IEmpmanager_Builder.Property.EMPID)
                  ? "empid=" + empid
                  : null),
              (!_unsetProperties.contains(IEmpmanager_Builder.Property.DIVISION)
                  ? "division=" + division
                  : null))
          + "}";
    }
  }
}
