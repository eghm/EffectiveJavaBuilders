// Autogenerated code. Do not modify.
package com.mycompany.app.jooq.tables.interfaces;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.EnumSet;
import javax.annotation.Generated;

/**
 * Auto-generated superclass of {@link IAbsentlog.Builder},
 * derived from the API of {@link IAbsentlog}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class IAbsentlog_Builder {

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    EMPID("empid"),
    ABSID("absid"),
    LOGDATE("logdate"),
    LOGVERSIONID("logversionid"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String empid;
  private String absid;
  private Timestamp logdate;
  private Integer logversionid;
  private final EnumSet<IAbsentlog_Builder.Property> _unsetProperties =
      EnumSet.allOf(IAbsentlog_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link IAbsentlog#getEmpid()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code empid} is null
   */
  public IAbsentlog.Builder setEmpid(String empid) {
    this.empid = Preconditions.checkNotNull(empid);
    _unsetProperties.remove(IAbsentlog_Builder.Property.EMPID);
    return (IAbsentlog.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link IAbsentlog#getEmpid()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getEmpid() {
    Preconditions.checkState(
        !_unsetProperties.contains(IAbsentlog_Builder.Property.EMPID), "empid not set");
    return empid;
  }

  /**
   * Sets the value to be returned by {@link IAbsentlog#getAbsid()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code absid} is null
   */
  public IAbsentlog.Builder setAbsid(String absid) {
    this.absid = Preconditions.checkNotNull(absid);
    _unsetProperties.remove(IAbsentlog_Builder.Property.ABSID);
    return (IAbsentlog.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link IAbsentlog#getAbsid()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getAbsid() {
    Preconditions.checkState(
        !_unsetProperties.contains(IAbsentlog_Builder.Property.ABSID), "absid not set");
    return absid;
  }

  /**
   * Sets the value to be returned by {@link IAbsentlog#getLogdate()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code logdate} is null
   */
  public IAbsentlog.Builder setLogdate(Timestamp logdate) {
    this.logdate = Preconditions.checkNotNull(logdate);
    _unsetProperties.remove(IAbsentlog_Builder.Property.LOGDATE);
    return (IAbsentlog.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link IAbsentlog#getLogdate()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Timestamp getLogdate() {
    Preconditions.checkState(
        !_unsetProperties.contains(IAbsentlog_Builder.Property.LOGDATE), "logdate not set");
    return logdate;
  }

  /**
   * Sets the value to be returned by {@link IAbsentlog#getLogversionid()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code logversionid} is null
   */
  public IAbsentlog.Builder setLogversionid(Integer logversionid) {
    this.logversionid = Preconditions.checkNotNull(logversionid);
    _unsetProperties.remove(IAbsentlog_Builder.Property.LOGVERSIONID);
    return (IAbsentlog.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link IAbsentlog#getLogversionid()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Integer getLogversionid() {
    Preconditions.checkState(
        !_unsetProperties.contains(IAbsentlog_Builder.Property.LOGVERSIONID),
        "logversionid not set");
    return logversionid;
  }

  /**
   * Sets all property values using the given {@code IAbsentlog} as a template.
   */
  public IAbsentlog.Builder mergeFrom(IAbsentlog value) {
    setEmpid(value.getEmpid());
    setAbsid(value.getAbsid());
    setLogdate(value.getLogdate());
    setLogversionid(value.getLogversionid());
    return (IAbsentlog.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public IAbsentlog.Builder mergeFrom(IAbsentlog.Builder template) {
    // Upcast to access the private _unsetProperties field.
    // Otherwise, oddly, we get an access violation.
    EnumSet<IAbsentlog_Builder.Property> _templateUnset =
        ((IAbsentlog_Builder) template)._unsetProperties;
    if (!_templateUnset.contains(IAbsentlog_Builder.Property.EMPID)) {
      setEmpid(template.getEmpid());
    }
    if (!_templateUnset.contains(IAbsentlog_Builder.Property.ABSID)) {
      setAbsid(template.getAbsid());
    }
    if (!_templateUnset.contains(IAbsentlog_Builder.Property.LOGDATE)) {
      setLogdate(template.getLogdate());
    }
    if (!_templateUnset.contains(IAbsentlog_Builder.Property.LOGVERSIONID)) {
      setLogversionid(template.getLogversionid());
    }
    return (IAbsentlog.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public IAbsentlog.Builder clear() {
    IAbsentlog_Builder _template = new IAbsentlog.Builder();
    empid = _template.empid;
    absid = _template.absid;
    logdate = _template.logdate;
    logversionid = _template.logversionid;
    _unsetProperties.clear();
    _unsetProperties.addAll(_template._unsetProperties);
    return (IAbsentlog.Builder) this;
  }

  /**
   * Returns a newly-created {@link IAbsentlog} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public IAbsentlog build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new IAbsentlog_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link IAbsentlog}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public IAbsentlog buildPartial() {
    return new IAbsentlog_Builder.Partial(this);
  }

  private static final class Value implements IAbsentlog {
    private final String empid;
    private final String absid;
    private final Timestamp logdate;
    private final Integer logversionid;

    private Value(IAbsentlog_Builder builder) {
      this.empid = builder.empid;
      this.absid = builder.absid;
      this.logdate = builder.logdate;
      this.logversionid = builder.logversionid;
    }

    @Override
    public String getEmpid() {
      return empid;
    }

    @Override
    public String getAbsid() {
      return absid;
    }

    @Override
    public Timestamp getLogdate() {
      return logdate;
    }

    @Override
    public Integer getLogversionid() {
      return logversionid;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IAbsentlog_Builder.Value)) {
        return false;
      }
      IAbsentlog_Builder.Value other = (IAbsentlog_Builder.Value) obj;
      if (!empid.equals(other.empid)) {
        return false;
      }
      if (!absid.equals(other.absid)) {
        return false;
      }
      if (!logdate.equals(other.logdate)) {
        return false;
      }
      if (!logversionid.equals(other.logversionid)) {
        return false;
      }
      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.hashCode(new Object[] {empid, absid, logdate, logversionid});
    }

    @Override
    public String toString() {
      return "IAbsentlog{"
          + "empid="
          + empid
          + ", "
          + "absid="
          + absid
          + ", "
          + "logdate="
          + logdate
          + ", "
          + "logversionid="
          + logversionid
          + "}";
    }
  }

  private static final class Partial implements IAbsentlog {
    private final String empid;
    private final String absid;
    private final Timestamp logdate;
    private final Integer logversionid;
    private final EnumSet<IAbsentlog_Builder.Property> _unsetProperties;

    Partial(IAbsentlog_Builder builder) {
      this.empid = builder.empid;
      this.absid = builder.absid;
      this.logdate = builder.logdate;
      this.logversionid = builder.logversionid;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String getEmpid() {
      if (_unsetProperties.contains(IAbsentlog_Builder.Property.EMPID)) {
        throw new UnsupportedOperationException("empid not set");
      }
      return empid;
    }

    @Override
    public String getAbsid() {
      if (_unsetProperties.contains(IAbsentlog_Builder.Property.ABSID)) {
        throw new UnsupportedOperationException("absid not set");
      }
      return absid;
    }

    @Override
    public Timestamp getLogdate() {
      if (_unsetProperties.contains(IAbsentlog_Builder.Property.LOGDATE)) {
        throw new UnsupportedOperationException("logdate not set");
      }
      return logdate;
    }

    @Override
    public Integer getLogversionid() {
      if (_unsetProperties.contains(IAbsentlog_Builder.Property.LOGVERSIONID)) {
        throw new UnsupportedOperationException("logversionid not set");
      }
      return logversionid;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof IAbsentlog_Builder.Partial)) {
        return false;
      }
      IAbsentlog_Builder.Partial other = (IAbsentlog_Builder.Partial) obj;
      if (empid != other.empid && (empid == null || !empid.equals(other.empid))) {
        return false;
      }
      if (absid != other.absid && (absid == null || !absid.equals(other.absid))) {
        return false;
      }
      if (logdate != other.logdate && (logdate == null || !logdate.equals(other.logdate))) {
        return false;
      }
      if (logversionid != other.logversionid
          && (logversionid == null || !logversionid.equals(other.logversionid))) {
        return false;
      }
      return _unsetProperties.equals(other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Arrays.hashCode(new Object[] {empid, absid, logdate, logversionid, _unsetProperties});
    }

    @Override
    public String toString() {
      return "partial IAbsentlog{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(IAbsentlog_Builder.Property.EMPID)
                  ? "empid=" + empid
                  : null),
              (!_unsetProperties.contains(IAbsentlog_Builder.Property.ABSID)
                  ? "absid=" + absid
                  : null),
              (!_unsetProperties.contains(IAbsentlog_Builder.Property.LOGDATE)
                  ? "logdate=" + logdate
                  : null),
              (!_unsetProperties.contains(IAbsentlog_Builder.Property.LOGVERSIONID)
                  ? "logversionid=" + logversionid
                  : null))
          + "}";
    }
  }
}
