/**
 * This class is generated by jOOQ
 */
package com.mycompany.app.jooq.tables.records;


import com.mycompany.app.jooq.tables.Absent;
import com.mycompany.app.jooq.tables.interfaces.IAbsent;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "absent", schema = "iob")
public class AbsentRecord extends UpdatableRecordImpl<AbsentRecord> implements Record6<String, String, Timestamp, String, String, Boolean>, IAbsent {

	private static final long serialVersionUID = 1713889947;

	/**
	 * Setter for <code>iob.absent.empid</code>.
	 */
	public void setEmpid(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>iob.absent.empid</code>.
	 */
	@Column(name = "empid", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getEmpid() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>iob.absent.absid</code>.
	 */
	public void setAbsid(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>iob.absent.absid</code>.
	 */
	@Id
	@Column(name = "absid", unique = true, nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getAbsid() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>iob.absent.absdate</code>.
	 */
	public void setAbsdate(Timestamp value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>iob.absent.absdate</code>.
	 */
	@Column(name = "absdate", nullable = false)
	@NotNull
	@Override
	public Timestamp getAbsdate() {
		return (Timestamp) getValue(2);
	}

	/**
	 * Setter for <code>iob.absent.absdescription</code>.
	 */
	public void setAbsdescription(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>iob.absent.absdescription</code>.
	 */
	@Column(name = "absdescription", nullable = false, length = 1)
	@NotNull
	@Size(max = 1)
	@Override
	public String getAbsdescription() {
		return (String) getValue(3);
	}

	/**
	 * Setter for <code>iob.absent.absnotes</code>.
	 */
	public void setAbsnotes(String value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>iob.absent.absnotes</code>.
	 */
	@Column(name = "absnotes")
	@Override
	public String getAbsnotes() {
		return (String) getValue(4);
	}

	/**
	 * Setter for <code>iob.absent.absdeleted</code>.
	 */
	public void setAbsdeleted(Boolean value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>iob.absent.absdeleted</code>.
	 */
	@Column(name = "absdeleted", nullable = false, precision = 1)
	@NotNull
	@Override
	public Boolean getAbsdeleted() {
		return (Boolean) getValue(5);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<String> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record6 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row6<String, String, Timestamp, String, String, Boolean> fieldsRow() {
		return (Row6) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row6<String, String, Timestamp, String, String, Boolean> valuesRow() {
		return (Row6) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return Absent.ABSENT.EMPID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Absent.ABSENT.ABSID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field3() {
		return Absent.ABSENT.ABSDATE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return Absent.ABSENT.ABSDESCRIPTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field5() {
		return Absent.ABSENT.ABSNOTES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Boolean> field6() {
		return Absent.ABSENT.ABSDELETED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getEmpid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getAbsid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value3() {
		return getAbsdate();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getAbsdescription();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value5() {
		return getAbsnotes();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Boolean value6() {
		return getAbsdeleted();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AbsentRecord value1(String value) {
		setEmpid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AbsentRecord value2(String value) {
		setAbsid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AbsentRecord value3(Timestamp value) {
		setAbsdate(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AbsentRecord value4(String value) {
		setAbsdescription(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AbsentRecord value5(String value) {
		setAbsnotes(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AbsentRecord value6(Boolean value) {
		setAbsdeleted(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AbsentRecord values(String value1, String value2, Timestamp value3, String value4, String value5, Boolean value6) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached AbsentRecord
	 */
	public AbsentRecord() {
		super(Absent.ABSENT);
	}

	/**
	 * Create a detached, initialised AbsentRecord
	 */
	public AbsentRecord(String empid, String absid, Timestamp absdate, String absdescription, String absnotes, Boolean absdeleted) {
		super(Absent.ABSENT);

		setValue(0, empid);
		setValue(1, absid);
		setValue(2, absdate);
		setValue(3, absdescription);
		setValue(4, absnotes);
		setValue(5, absdeleted);
	}
}
