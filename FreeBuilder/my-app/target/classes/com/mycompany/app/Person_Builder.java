// Autogenerated code. Do not modify.
package com.mycompany.app;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import java.util.Arrays;
import java.util.EnumSet;
import javax.annotation.Generated;

/**
 * Auto-generated superclass of {@link Person.Builder},
 * derived from the API of {@link Person}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class Person_Builder {

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    NAME("name"),
    AGE("age"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String name;
  private int age;
  private final EnumSet<Person_Builder.Property> _unsetProperties =
      EnumSet.allOf(Person_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link Person#getName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code name} is null
   */
  public Person.Builder setName(String name) {
    this.name = Preconditions.checkNotNull(name);
    _unsetProperties.remove(Person_Builder.Property.NAME);
    return (Person.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link Person#getName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getName() {
    Preconditions.checkState(
        !_unsetProperties.contains(Person_Builder.Property.NAME), "name not set");
    return name;
  }

  /**
   * Sets the value to be returned by {@link Person#getAge()}.
   *
   * @return this {@code Builder} object
   */
  public Person.Builder setAge(int age) {
    this.age = age;
    _unsetProperties.remove(Person_Builder.Property.AGE);
    return (Person.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link Person#getAge()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public int getAge() {
    Preconditions.checkState(
        !_unsetProperties.contains(Person_Builder.Property.AGE), "age not set");
    return age;
  }

  /**
   * Sets all property values using the given {@code Person} as a template.
   */
  public Person.Builder mergeFrom(Person value) {
    setName(value.getName());
    setAge(value.getAge());
    return (Person.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public Person.Builder mergeFrom(Person.Builder template) {
    // Upcast to access the private _unsetProperties field.
    // Otherwise, oddly, we get an access violation.
    EnumSet<Person_Builder.Property> _templateUnset = ((Person_Builder) template)._unsetProperties;
    if (!_templateUnset.contains(Person_Builder.Property.NAME)) {
      setName(template.getName());
    }
    if (!_templateUnset.contains(Person_Builder.Property.AGE)) {
      setAge(template.getAge());
    }
    return (Person.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public Person.Builder clear() {
    Person_Builder _template = new Person.Builder();
    name = _template.name;
    age = _template.age;
    _unsetProperties.clear();
    _unsetProperties.addAll(_template._unsetProperties);
    return (Person.Builder) this;
  }

  /**
   * Returns a newly-created {@link Person} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public Person build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new Person_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link Person}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public Person buildPartial() {
    return new Person_Builder.Partial(this);
  }

  private static final class Value implements Person {
    private final String name;
    private final int age;

    private Value(Person_Builder builder) {
      this.name = builder.name;
      this.age = builder.age;
    }

    @Override
    public String getName() {
      return name;
    }

    @Override
    public int getAge() {
      return age;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof Person_Builder.Value)) {
        return false;
      }
      Person_Builder.Value other = (Person_Builder.Value) obj;
      if (!name.equals(other.name)) {
        return false;
      }
      if (age != other.age) {
        return false;
      }
      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.hashCode(new Object[] {name, age});
    }

    @Override
    public String toString() {
      return "Person{" + "name=" + name + ", " + "age=" + age + "}";
    }
  }

  private static final class Partial implements Person {
    private final String name;
    private final int age;
    private final EnumSet<Person_Builder.Property> _unsetProperties;

    Partial(Person_Builder builder) {
      this.name = builder.name;
      this.age = builder.age;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String getName() {
      if (_unsetProperties.contains(Person_Builder.Property.NAME)) {
        throw new UnsupportedOperationException("name not set");
      }
      return name;
    }

    @Override
    public int getAge() {
      if (_unsetProperties.contains(Person_Builder.Property.AGE)) {
        throw new UnsupportedOperationException("age not set");
      }
      return age;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof Person_Builder.Partial)) {
        return false;
      }
      Person_Builder.Partial other = (Person_Builder.Partial) obj;
      if (name != other.name && (name == null || !name.equals(other.name))) {
        return false;
      }
      if (age != other.age) {
        return false;
      }
      return _unsetProperties.equals(other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Arrays.hashCode(new Object[] {name, age, _unsetProperties});
    }

    @Override
    public String toString() {
      return "partial Person{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(Person_Builder.Property.NAME) ? "name=" + name : null),
              (!_unsetProperties.contains(Person_Builder.Property.AGE) ? "age=" + age : null))
          + "}";
    }
  }
}
